<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>

    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />

    <!-- JS, Popper.js, and jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
      integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <style>
      #map {
        height: 100vh;
        width: 100%;
      }

      html,
      body {
        height: 100vh;
        margin: 0;
        padding: 0;
      }
    </style>
  </head>

  <body>
    <p id="user-id-socket" style="display: none;"><%= id %></p>
    <div class="container" style="margin-top: 70px; width: 100%;">
      <div>
        <!-- <h3>Time to next update: <span id="time" class="time" class="badge badge-danger">30</span></h3> -->
      </div>
      <br />
      <div id="map"></div>

      <div class="row">
        <div
          class="col-md-6"
          style="border-right: solid 1px black; padding-right: 50px;"
        >
          <div class="input-group">
            <div id="coord-btn-container" class="input-group-prepend"></div>
            <input
              id="logitude"
              type="text"
              placeholder="Longitude"
              aria-label="First name"
              class="form-control"
            />
            <input
              id="latitude"
              type="text"
              placeholder="Latitude"
              aria-label="Last name"
              class="form-control"
            />
          </div>
          <br />
          <div class="input-group mb-3">
            <input
              id="radius"
              type="text"
              class="form-control"
              placeholder="Radius"
              aria-label="Recipient's username"
              aria-describedby="button-addon2"
            />
          </div>
        </div>
      </div>
      <div style="border: solid 2px black;" class="device-buttons-container">
        <div class="edit-btn-container"></div>
      </div>
      <div
        style="border: solid 2px black; height: 10vh;"
        class="zone-buttons-container"
      ></div>
      <div class="zone-edit"></div>
    </div>
    <div
      id="my-alert"
      class="alert alert-warning alert-dismissible collapse"
      role="alert"
    >
      <strong>Hint</strong> Type in all lat, lng, rad value before hit edit
      button to effectively change the circle
      <button id="close-alert" type="button" class="close" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <script
      async
      defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC3UFvoj_1OQ9N6Mzbz1lQu7tRdQnn8_cQ"
    ></script>
  </body>
  <script type="text/javascript">
    // Generate origin element
    let countTime = 0;
    let IpLong = document.getElementById("logitude");
    let IpLat = document.getElementById("latitude");
    let map;
    let circle;
    let marker;

    // Get origin data, set to orign element
    $.ajax({
      url: "/cli-main/get-devices-gps-information",
      type: "POST",
    }).done((result) => {
      $(".zone-buttons-container").hide();

      //default map view
      initMap(30, 30, 2);
      //Create a list of gps devices
      i = 1;
      result.forEach((device) => {
        $(".device-buttons-container").append(
          $(
            " <button id='" +
              device._id +
              "' class='btn btn-outline-secondary' type='button' id='button-addon2'>Device " +
              i +
              "</button>"
          ).on("click", function () {
            //focus map
            initMap(device.DeviceData.Latitude, device.DeviceData.Longitude, 5);

            //create marker for that gps

            if (marker) marker.setMap(null);
            marker = new google.maps.Marker({
              position: {
                lat: parseFloat(device.DeviceData.Latitude),
                lng: parseFloat(device.DeviceData.Longitude),
              },
              map,
            });

            $(".edit-btn-container").empty();
            $(".edit-btn-container").append(
              $(
                " <button class='btn btn-outline-secondary' type='button' id='button-addon2'>Edit</button>"
              ).on("click", function () {
                $(".zone-buttons-container").show();

                //get safe Zone
                $.ajax({
                  url: "/cli-main/get-devices-client-information",
                  type: "POST",
                  data: {
                    GPSID: device._id,
                  },
                }).done((zones) => {
                  j = 1;
                  $(".zone-buttons-container").empty();
                  zones.forEach((zone) => {
                    $(".zone-buttons-container").append(
                      $(
                        " <button class='btn btn-outline-secondary' type='button' id='button-addon2'>Zone " +
                          j +
                          "</button>"
                      ).on("click", function () {
                        /**/

                        if (circle) circle.setMap(null);

                        circle = new google.maps.Circle({
                          strokeColor: "#FF0000",
                          strokeOpacity: 0.8,
                          strokeWeight: 2,
                          fillColor: "#FF0000",
                          fillOpacity: 0.35,
                          map,
                          center: {
                            lat: zone.Data[1],
                            lng: zone.Data[0],
                          },
                          radius: zone.Radius,
                        });
                        $(".zone-edit").empty();
                        $(".zone-edit").append(
                          $(
                            " <button class='btn btn-outline-secondary' type='button' id='button-addon2'>Edit Zone</button>"
                          ).on("click", function () {
                            //circle become editable
                            circle.setEditable(true);

                            //show warning if lat, lng or rad is empty
                            if (
                              $("#logitude").val() === "" ||
                              $("#latitude").val() === "" ||
                              $("#radius").val() === ""
                            ) {
                              $("#my-alert").show("fade");
                              $("#close-alert").on("click", function () {
                                $("#my-alert").hide("fade");
                              });
                              map.panTo(circle.getCenter());
                              map.setZoom(14);
                            } else {
                              circle.setCenter({
                                lat: parseFloat($("#latitude").val()),
                                lng: parseFloat($("#logitude").val()),
                              });
                              circle.setRadius(parseFloat($("#radius").val()));

                              map.panTo(circle.getCenter());
                              map.setZoom(14);
                            }

                            //change circle center listener
                            google.maps.event.addListener(
                              circle,
                              "center_changed",
                              function (event) {
                                $("#logitude").val(circle.getCenter().lng());
                                $("#latitude").val(circle.getCenter().lat());
                              }
                            );

                            //change circle radius listener
                            google.maps.event.addListener(
                              circle,
                              "radius_changed",
                              function (event) {
                                $("#radius").val(circle.getRadius());
                              }
                            );

                            google.maps.event.addListener(
                              map,
                              "click",
                              function (event) {
                                circle.setEditable(false);
                              }
                            );

                            $("#coord-btn-container").empty();
                            $("#coord-btn-container").append(
                              $(
                                "<button id='coordinatebtn' class='input-group-text text-info'>Coordinates</button>"
                              ).on("click", function () {
                                circle.setMap(null);
                                $(".zone-edit").empty();
                                $(".zone-buttons-container").empty();
                                $(".zone-buttons-container").hide();

                                // Update gps coordinates, realtime response with socket
                                $.ajax({
                                  url: "/cli-main/update-gps-coordinates",
                                  type: "POST",
                                  data: {
                                    GPSID: zone.GPSID,
                                    Long:
                                      IpLong.value === ""
                                        ? zone.Data[0]
                                        : IpLong.value,
                                    Lat:
                                      IpLat.value === ""
                                        ? zone.Data[1]
                                        : IpLat.value,
                                  },
                                }).done((res) => {
                                  //console.log(res);
                                });

                                //update Radius realtime
                                $.ajax({
                                  type: "POST",
                                  url: "/cli-main/update-gps-radius",
                                  data: {
                                    GPSID: zone.GPSID,
                                    Radius:
                                      $("#radius").val() === ""
                                        ? zone.Radius
                                        : $("#radius").val(),
                                  },
                                }).done((res) => {
                                  //console.log(res);
                                });
                              })
                            );
                          })
                        );
                      })
                    );
                    j++;
                  });
                });
              })
            );
          })
        );
        i++;
      });
    });

    //function create map
    function initMap(lat, lng, zoom) {
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: parseFloat(lat), lng: parseFloat(lng) },
        zoom,
      });
    }

    // Initial  socket connection (real time connection)
    const socket = io.connect("http://localhost:5000");
    // const socket = io.connect('https://getdateset.herokuapp.com')

    // Sign socket with user id, and remove it in client-view
    document.addEventListener("DOMContentLoaded", function () {
      socket.emit(
        "sign-in-socket",
        document.getElementById("user-id-socket").textContent
      );
      document.getElementById("user-id-socket").remove();
    });

    // Whenever MQTT get new DBMS, if It going to be changed,
    //  emit to user socket online
    socket.on("emit-new-gps", (data) => {
      console.log(data);
      //  data.gpsID; ID of GPS, user for determine what is the GPS change
      Longitude.textContent = data.data[0];
      Latitude.textContent = data.data[1];

      if (marker) marker.setMap(null);
      marker = new google.maps.Marker({
        position: { lat: data.data[0], lng: data.data[1] },
        map,
      });
    });

    // Whenever data change, MQTT, User change, ...,
    // Server response to client new status of device
    socket.on("update-status-GPS", (data) => {
      // id: ID of GPS, string type
      //State.textContent = data.status;
    });
  </script>
</html>
